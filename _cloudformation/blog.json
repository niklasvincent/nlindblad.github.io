{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Nginx stack for blog",
  "Parameters": {
    "SslCertificateArn": {
      "Description": "SSL certificate ARN",
      "Type": "String"
    },
    "NginxConfigurationUrl": {
      "Description": "Nginx configuration file URL",
      "Type": "String"
    },
    "AmiId": {
      "Description": "Custom AMI to use for instances, created using Packer",
      "Type": "String",
      "Default": "ami-0247e571"
    },
    "VpcId": {
      "Description": "ID of the VPC onto which to launch the application",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PublicVpcSubnets" : {
      "Description": "Public subnets to use for the ELB",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MaxInstances" : {
      "Description": "Maximum number of instances. This should be (at least) double the desired capacity.",
      "Type": "Number",
      "Default": 1
    },
    "MinInstances" : {
      "Description": "Minimum number of instances",
      "Type": "Number",
      "Default": 1
    }
  },
  "Resources": {
    "ServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "ec2:DescribeTags",
                "Resource": "*"
              }
            ]
          }
        } ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {"Ref": "ServerRole"} ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme" : "internet-facing",
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "InstancePort": "80",
            "Protocol": "HTTPS",
            "SSLCertificateId": { "Ref": "SslCertificateArn"}
          },
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "CrossZone": "true",
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "10"
        },
        "Subnets": { "Ref": "PublicVpcSubnets" },
        "SecurityGroups": [
          { "Ref": "LoadBalancerSecurityGroup" }
        ]
      }
    },
    "AutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": {"Ref": "MinInstances"},
        "MaxSize": {"Ref": "MaxInstances"},
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 400,
        "LoadBalancerNames": [ {"Ref": "LoadBalancer"} ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "blog",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Stack",
            "Value": "nginx",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {"Ref": "AmiId"},
        "SecurityGroups": [
          {"Ref": "InstanceSecurityGroup"}
        ],
        "InstanceType": {"Ref": "InstanceType"},
        "IamInstanceProfile": {"Ref": "InstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["\n", [
              "#!/bin/bash -ev",

              "apt-get -y update",
              "apt-get -y install nginx",
              "service nginx stop",

              { "Fn::Join": [ "", [ "curl ", { "Ref": "NginxConfigurationUrl" }, " > /etc/nginx/nginx.conf" ] ] },

              "service nginx start",

              "apt-get install -y unattended-upgrades",

              "apt-get install -y ufw",
              "ufw enable",
              "ufw default deny incoming",
              "ufw default deny outgoing",
              "ufw allow 80/tcp",
              "ufw allow out 53,80,443/tcp",
              "ufw allow out 53,67,68/udp"
            ]
          ]
          }
        }
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Open up HTTP access to load balancer",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Open up HTTP access to load balancer",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "AutoscalingGroup" },
        "AdjustmentType": "PercentChangeInCapacity",
        "ScalingAdjustment": "100",
        "Cooldown": "300"
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoscalingGroup" },
        "Cooldown": "3600",
        "ScalingAdjustment": "-1"
      }
    }
  },
  "Outputs": {
    "LoadBalancer": {
      "Value": { "Fn::GetAtt": ["LoadBalancer", "DNSName"] }
    }
  }
}

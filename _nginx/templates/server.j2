    server {
      listen                      80;
      server_name                 {{domain}};
      root                        /var/www;
      limit_conn                  conn_limit_per_ip 10;
      limit_req                   zone=req_limit_per_ip burst=10 nodelay;
      proxy_cache                 one;

      if ($http_x_forwarded_proto = "http") {
        return 301 https://{{domain}}$request_uri;
      }

      rewrite ^/(.*)/$ /$1 permanent;

      location / {
          resolver                {{dns_server}};
          proxy_pass              https://{{upstream_host}};
          proxy_redirect          default;
          proxy_buffering         on;
          proxy_set_header        Host                    {{upstream_host}};
          proxy_set_header        X-Real-IP               $remote_addr;
          proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Protocol    $scheme;
          proxy_http_version      1.1;
      }

      location ~* \.(?:ico|css|js|gif|jpe?g|png|woff|woff2)$ {
          expires 30d;
          add_header              Pragma public;
          add_header              Cache-Control "public";
          resolver                {{dns_server}};
          proxy_pass              https://{{upstream_host}};
          proxy_redirect          default;
          proxy_buffering         on;
          proxy_set_header        Host                    {{upstream_host}};
          proxy_set_header        X-Real-IP               $remote_addr;
          proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Protocol    $scheme;
          proxy_http_version      1.1;
      }
    }

    server {
        listen                    80;
        server_name               www.{{domain}};
        return 301                https://{{domain}}$request_uri;
        limit_conn                conn_limit_per_ip 10;
        limit_req                 zone=req_limit_per_ip burst=10 nodelay;
    }
